@model PlayerStatus
@{
    ViewData["Title"] = "Player";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int i = 1;

    var remainingTime = Model.CurrentAvatar.ExpireDate - DateTime.Now;
    TimeSpan dayDiff = DateTime.Now.Subtract(Model.CurrentPlayer.CreatedDay); 
}

<style>
    body {
        background-image: url(/Images/Fields.png);
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center center;
        background-attachment: fixed;
    }
</style>

<h3><b>Hello, @User.Identity.Name!</b></h3>

<div class="card-deck">
    <div class="card bg-light">
        <div class="card-body text-center">
            <p><b>Math Quiz</b></p>
            <form asp-controller="GamePlay" asp-action="QuizQuestion" onsubmit="return ValidateForm()">
                <p>
                    <b>Select your category:</b>
                    <select id="categories" name="Category" class="form-control">
                        <option value="0">Simple Arithmetic</option>
                        <option value="1">Fraction Arithmetic</option>
                        <option value="2">Exponent Radicals Arithmetic</option>
                        <option value="3">Simple Trigonometry</option>
                        <option value="4">Matrices Arithmetic</option>
                        <option value="5">Linear Equations</option>
                        <option value="6">Equations Containing Radicals</option>
                        <option value="7">Equations Containing AbsoluteValues</option>
                        <option value="8">Quadratic Equations</option>
                        <option value="9">Higher Order Polynomial Equations</option>
                        <option value="10">Equations Involving Fractions</option>
                        <option value="11">Exponential Equations</option>
                        <option value="12">Logarithmic Equations</option>
                        <option value="13">Trigonometric Equations</option>
                        <option value="14">Matrices Equations</option>
                        <option value="15">Polynomial Differentiation</option>
                        <option value="16">Trigonometric Differentiation</option>
                        <option value="17">Exponents Differentiation</option>
                        <option value="18">Polynomial Integration</option>
                        <option value="19">Trigonometric Integration</option>
                        <option value="20">Exponents Integration</option>
                        <option value="21">Polynomial Definite Integrals</option>
                        <option value="22">Trigonometric Definite Integrals</option>
                        <option value="23">Exponents DefiniteIntegrals</option>
                        <option value="24">First Order Differential Equations</option>
                        <option value="25">Second Order Differential Equations</option>
                    </select>
                </p>
                <p>
                    <b>Select Your Level:</b>
                    <select id="difficulties" name="Difficulty" class="form-control">
                        <option id="b" value="beginner">Beginner</option>
                        <option id="i" value="intermediate">Intermediate</option>
                        <option id="a" value="advanced">Advanced</option>
                    </select>
                </p>
                <div class="form-group">
                    <input type="submit" class="form-control btn btn-primary" value="Start Quiz" />
                </div>
            </form>
        </div>
    </div>
    <div class="card bg-light">
        <div class="card-body text-center">
            @if (Model.CurrentAvatar.MoodId == 6)
            {
                <img src="~/Images/ExcitedMonster.png" style="max-width: 50%;" />
            }
            else if (Model.CurrentAvatar.MoodId == 5)
            {
                <img src="~/Images/HappyMonster.png" style="max-width: 50%;" />
            }
            else if (Model.CurrentAvatar.MoodId == 4)
            {
                <img src="~/Images/SillyMonster.png" style="max-width: 50%;" />
            }
            else if (Model.CurrentAvatar.MoodId == 3)
            {
                <img src="~/Images/UpsetMonster.png" style="max-width: 50%;" />
            }
            else if (Model.CurrentAvatar.MoodId == 2)
            {
                <img src="~/Images/SurprisedMonster.png" style="max-width: 50%;" />
            }
            else
            {
                <img src="~/Images/Farm2.jpg" style="max-width: 50%;" />
            }
            <p><b>@Model.CurrentAvatar.AvatarName</b></p>
            <p>Current Score: @Model.CurrentAvatar.AvatarEnergy / 1440</p>
            <p>Last Time Fed: @Model.CurrentAvatar.LastFeedDate</p>
            <p>Remaining Time:</p>
            <div id="countdown"></div>
            <script>
                    function countdownTimer() {
                        const difference = +new Date(@Model.CurrentAvatar.ExpireDate.Year, @Model.CurrentAvatar.ExpireDate.Month, @Model.CurrentAvatar.ExpireDate.Day, @Model.CurrentAvatar.ExpireDate.Hour, @Model.CurrentAvatar.ExpireDate.Minute, @Model.CurrentAvatar.ExpireDate.Second, @Model.CurrentAvatar.ExpireDate.Millisecond) - +new Date();
                        let remaining = "Time's up!";

                        if (difference > 0) {
                            const parts = {
                                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                                minutes: Math.floor((difference / 1000 / 60) % 60),
                                seconds: Math.floor((difference / 1000) % 60)
                            };

                            remaining = Object.keys(parts)
                                .map(part => {
                                    if (!parts[part]) return;
                                    return `${parts[part]} ${part}`;
                                })
                                .join(" ");
                        }

                        document.getElementById("countdown").innerHTML = remaining;
                    }
                    countdownTimer();
                    setInterval(countdownTimer, 1000);
            </script>
        </div>
    </div>
</div>

    &nbsp;
<div class="card-deck">
    <div class="card bg-light">
        <div class="card-body text-center">
            <p class="card-text"><b>Leaderboard</b></p>
            <div style="position:relative; height:400px;overflow:auto; display:block;">
                <table class="table table-striped mb-0">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>UserName</th>
                            <th>Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in Model.Leaderboard)
                        {
                            <tr>
                                <td>@i</td>
                                <td>@player.PlayerUserName</td>
                                <td>@player.PlayerScore</td>
                            </tr>
                            i++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="card bg-light">
        <div class="card-body text-center">
            <p class="card-text">Stats</p>
            
            <p>Score: @Model.CurrentPlayer.PlayerScore</p>
            <p>Join Date: @Model.CurrentPlayer.CreatedDay</p>
            <p>Days with us: @dayDiff.Days</p>
        </div>
    </div>
</div>
<div>

</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $('#categories').change(function () {
            var selection = $('#categories').val();
            if (selection == 4 || selection == 14 || selection == 17 || selection == 20) {
                $('#difficulties').val($('#b').val());
                $('#b').prop("disabled", false);
                $('#i').prop("disabled", true);
                $('#a').prop("disabled", true);
            }
            else if (selection == 12) {
                $('#difficulties').val($('#i').val());
                $('#b').prop("disabled", true);
                $('#i').prop("disabled", false);
                $('#a').prop("disabled", true);
            }
            else if (selection == 9 || selection == 10) {
                $('#difficulties').val($('#b').val());
                $('#b').prop("disabled", false);
                $('#i').prop("disabled", true);
                $('#a').prop("disabled", true);
            }
            else if (selection == 2 || selection == 3 || selection == 8 || selection == 11 || selection == 13 || selection == 16 || selection == 19 || selection == 22 || selection == 23) {
                $('#difficulties').val($('#a').val());
                $('#b').prop("disabled", true);
                $('#i').prop("disabled", true);
                $('#a').prop("disabled", false);
            }
            else {
                $('#difficulties').val($('#b').val());
                $('#b').prop("disabled", false);
                $('#i').prop("disabled", false);
                $('#a').prop("disabled", false);
            }
        });
    });

    function ValidateForm() {
        var mCategory = $('#categories').val();
        var mDifficulty = $('#difficulties').val();

        if (mCategory == 12) {
            if (mDifficulty == "beginner" || mDifficulty == "advanced") {
                return true;
            }
            else {
                alert("Please select an enabled difficulty for this category.");
                return false;
            }
        }
        else if (mCategory == 9 || mCategory == 10) {
            if (mDifficulty == "intermediate" || mDifficulty == "advanced") {
                return true;
            }
            else {
                alert("Please select an enabled difficulty for this category.");
                return false;
            }
        }
        else if (mCategory == 4 || mCategory == 14 || mCategory == 17 || mCategory == 20) {
            if (mDifficulty == "beginner") {
                return true;
            }
            else {
                alert("Please select an enabled difficulty for this category.");
                return false;
            }
        }
        else if (mCategory == 2 || mCategory == 3 || mCategory == 8 || mCategory == 11 || mCategory == 13 || mCategory == 16 || mCategory == 19 || mCategory == 22 || mCategory == 23) {
            if (mDifficulty == "advanced") {
                return true;
            }
            else {
                alert("Please select an enabled difficulty for this category.");
                return false;
            }
        }
        else if (mCategory == 0 || mCategory == 1 || mCategory == 5 || mCategory == 6 || mCategory == 7 || mCategory == 15 || mCategory == 18 || mCategory == 21 || mCategory == 24 || mCategory == 25) {
            if (mDifficulty == "beginner" || mDifficulty == "intermediate" || mDifficulty == "advanced") {
                return true;
            }
            else {
                alert("Please select an enabled difficulty for this category.");
                return false;
            }
        }
        else {
            alert("Please select a real category");
            return false;
        }
    }


</script>